class  Ex01
{
	public static void main(String[] args) 
	{
	  // 클래스 : 객체를 만들기 위한 설계도, 틀, 
	  // 객체로 만들어졌을때 활용할 수 있는 기능과 상태값을 나타냄
	  // 기능 = 메소드 = 동작, 상태 = 변수,상수 = 특징
	  // 객체 : 현실세계에서 말하는 모든 사물을 뜻한다.
	  //        이러한 현실세계의 사물들을 자바언어로 표현해서
	  //        프로그래밍한 것을 자바에서는 객체라고 표현한다.
	  // 1. 클래스의 구조 : 헤더, 멤버필드(변수와 상수), 멤버메소드, 생성자
	  // 가. 클래스 헤더 :  [접근제한][클래스종류] class 클래스이름
	  //  1) 접근제한 : 해당클래스를 객체로 만들었을 때 외부에서 접근할 수 있는 권한
	  //     public > protected > 생략 > private   
	  //   가) public : 공용, 누구나 다 접근 가능 (클래스와 메소드에 기본)
	  //   나) protected : 같은폴더(패키지), 상속관계에 있을때 접근 가능
	  //   다) 생략 : 같은 폴더에 존재해야만 접근 가능
	  //   라) private : 외부에서는 접근 불가능, 내부멤버끼리만 접근가능 (보안)
	  //                  변수나 상수에 많이 사용
	  //  2) 클래스 종류 : 일반적인 클래스는 이부분을 생략
	  //     특별한 클래스에 예약어를 붙임 (final, abstract,...)
	  //  3) 클래스 이름 : 첫글자 대문자, 두단어 이상일때 단어의 첫글자는 대문자
	  //                   공백문자 사용불가능, 특수문자 사용불가능
	  // 나. 멤버필드(변수와 상수) :  상태값, 속성, 특징, 아는 것을 뜻한다.
	  //  1) 변수 : 프로그램이 끝날때 까지 언제든지 변할 수 있는 상태(데이터저장공간)
	  //  2) 상수 : 프고르매이 끝날때 까지 처음 지정된 값이 그대로 유지 되는 상태(저장공간)
	  //  3) 인스턴스 : 
	  //      - 객체생성과 함께 생성되는 멤버들(변수, 상수, 메소드)
	  //      - heap 메모리에 만들어짐
	  //      - 접근법 : 객체참조변수.변수이름, 객체 참조변수.메소드이름
      //  4) static 
	  //      - 객체 생성과 상관없이 먼저 만들어진 멤버(변수, 상수, 메소드)
	  //      - static 메모리에 만들어짐
      //      - static이라는 예약어를 반드시 사용한다.
	  //      - 객체를 별도로 만들지 않고 클래스.변수이름, 클래스.메소드이름으로 접근한다.

      // 클래스를 객체로 만드는 법 : 클래스이름 참조변수 = new 생성자 ;
	  // 생성자 : 클래스를 객체로 생성할때 1번 호출된다.
	  //          생성자의 목적은 멤버필드(변수,상수)의 초기화에 있다.
      //          모든 클래스는 생성자를 가지고 있다.
	  //          생성자가 없으면 자동으로 기본생성자를 호출한다.
	  //          기본생성자란 매개변수, 인자가 없는 생성자를 뜻한다.
	  //          생성자의 특징은 클래스이름과 같다.
	  //          기본생성자 = 클래스이름()
	  //          생성자를 만들면 만들어진 생성자를 이용해서 객체 생성해야 된다.
	  // 멤버 메소드 : 동작 = 기능 = 작동
	  // 구성 : [접근제한] [반환형] 메소드이름([인자, 매개변수]){  실행문들  }
	  // 반환형	있다 : 메소드 실행하고 해당 메소드를 호출한 곳으로 되돌아 갈때
	  //               결과를 가지고 감, 결과의 자료형을 말한다.
	  // 반환형이 없다. : 메소드실행결과를 가지고 가지 않는다는 뜻으로 void라는 예약어 사용
	  // 오버로딩 (중복정의) : 하나의 클래스안에서 같은이름을 가진 메소드가 여러개 존재하는 것
	  //                       이름은 같으나 반드시 인자의 자료형이나 갯수는 달라야 한다.
	  // 메소드는 다른 메소드를 호출할 수 있다.
	}
}
